(()=>{"use strict";const t=(...t)=>{},e=(...t)=>{console.info("[Compr Extension]",...t)},i=(...t)=>{console.warn("[Compr Extension]",...t)},a=(...t)=>{console.error("[Compr Extension]",...t)},n=new class{delay(t,e){const i=Math.floor(Math.random()*(e-t+1))+t;return new Promise(t=>setTimeout(t,i))}async typeText(t,e){t.focus(),t.value="";for(const i of e)t.value+=i,t.dispatchEvent(new Event("input",{bubbles:!0})),await this.delay(50,150);t.dispatchEvent(new Event("change",{bubbles:!0})),t.blur()}async clickElement(t){await this.delay(500,2e3),t.scrollIntoView({behavior:"smooth",block:"center"}),await this.delay(200,500),t.click()}async waitForElement(t,e=1e4){const i=Date.now();for(;Date.now()-i<e;){const e=document.querySelector(t);if(e)return e;await this.delay(100,300)}throw new Error(`Element not found: ${t}`)}async downloadImage(t){const e=await fetch(t);if(!e.ok)throw new Error(`Failed to download image: ${e.statusText}`);return await e.blob()}async uploadImages(n){if(!n||0===n.length)return void i("No photo URLs provided, skipping image upload");e(`Uploading ${n.length} images to Mercari`,n);const o=n.slice(0,12);let s=0;for(let i=0;i<o.length;i++){t((o.length,o[i]));try{const t=await this.waitForElement('input[type="file"][accept*="image"]');e("Found file input:",t),e(`Downloading image from: ${o[i]}`);const a=await this.downloadImage(o[i]);e(`Downloaded blob: size=${a.size}, type=${a.type}`);const n=`image-${i+1}.jpg`,r=new File([a],n,{type:a.type||"image/jpeg"});e(`Created file: name=${r.name}, size=${r.size}, type=${r.type}`);const c=new DataTransfer;c.items.add(r),e(`DataTransfer files: ${c.files.length}`),t.files=c.files;const l=["input","change"];for(const e of l)t.dispatchEvent(new Event(e,{bubbles:!0}));e(`Triggered events for image ${i+1}, waiting for upload...`),await this.delay(2e3,3e3),s++,e(`Successfully uploaded image ${i+1}/${o.length}`)}catch(t){a(`Failed to upload image ${i+1}:`,t)}}if(0===s)throw new Error("Failed to upload any images");e(`${s}/${o.length} images uploaded successfully`)}async fillTitle(t){const e=['input[name="name"]','input[placeholder*="title" i]','input[aria-label*="title" i]',"#name"];for(const i of e)try{const e=await this.waitForElement(i,3e3);return void await this.typeText(e,t)}catch{continue}throw new Error("Could not find title input")}async fillDescription(t){const e=['textarea[name="description"]','textarea[placeholder*="description" i]','textarea[aria-label*="description" i]',"#description"];for(const i of e)try{const e=await this.waitForElement(i,3e3);return void await this.typeText(e,t)}catch{continue}throw new Error("Could not find description input")}async selectCategory(t){try{const t=await this.waitForElement('[data-testid="category-button"], button:has-text("Category")',5e3);await this.clickElement(t),await this.delay(1e3,1500);const i=document.querySelectorAll('[role="option"], .category-option, [data-testid*="category"]');if(i.length>0){e(`Found ${i.length} category options`);let t=i[0];for(const e of Array.from(i)){const i=e.textContent?.toLowerCase()||"";if(i.includes("women")||i.includes("clothing")){t=e;break}}e(`Selecting category: ${t.textContent?.trim()}`),await this.clickElement(t),await this.delay(1e3,1500)}}catch(t){i("Failed to select category:",t)}}async fillBrand(t){if(t)try{const e=['input[name="brand"]','input[placeholder*="brand" i]','input[aria-label*="brand" i]',"#brand"];for(const i of e)try{const e=await this.waitForElement(i,3e3);return await this.typeText(e,t),void await this.delay(500,1e3)}catch{continue}}catch(t){i("Failed to fill brand:",t)}}async selectCondition(t){try{const e={new:"New",like_new:"Like New",good:"Good",fair:"Fair",poor:"Poor"}[t]||"Good",i=document.querySelectorAll('button:has-text("Condition"), [data-testid*="condition"]');if(i.length>0){await this.clickElement(i[0]),await this.delay(1e3,1500);const t=document.querySelectorAll('[role="option"], .condition-option');for(const i of Array.from(t))if(i.textContent?.includes(e)){await this.clickElement(i);break}}}catch(t){i("Failed to select condition:",t)}}async fillPrice(t){const i=['input[name="price"]','input[placeholder*="price" i]','input[aria-label*="price" i]',"#price"];for(const a of i)try{const i=await this.waitForElement(a,3e3);return i.focus(),await this.delay(100,200),i.value=String(Math.ceil(t)),i.dispatchEvent(new Event("input",{bubbles:!0})),i.dispatchEvent(new Event("change",{bubbles:!0})),await this.delay(200,300),i.blur(),void e("Price set to:",i.value)}catch{continue}throw new Error("Could not find price input")}async selectShipping(){try{const t=document.querySelectorAll('button:has-text("Ship"), [data-testid*="shipping"]');t.length>0&&(await this.clickElement(t[0]),await this.delay(500,1e3))}catch(t){i("Failed to select shipping:",t)}}async submitListing(){const t=['button:has-text("List")','button[type="submit"]','[data-testid="submit-button"]','button:has-text("Submit")'];let i=null;for(const e of t)try{i=await this.waitForElement(e,3e3);break}catch{continue}if(!i)throw new Error("Could not find submit button");e("Found submit button, clicking..."),await this.clickElement(i),await this.delay(3e3,5e3);const a=window.location.href;if(a.includes("/item/")||a.includes("/success")||a.includes("/mypage/listings")){e("Listing submitted successfully");const t=a.match(/\/item\/m(\d+)/);return{platformListingId:t?t[1]:"success",platformUrl:a}}return e("Listing submitted (no redirect detected)"),{platformListingId:"success",platformUrl:"https://www.mercari.com/mypage/listings/"}}async createListing(t){try{e("Starting Mercari listing creation for:",t.title),e("Listing data received:",JSON.stringify(t)),e("Photo URLs:",t.photo_urls),await this.uploadImages(t.photo_urls),await this.fillTitle(t.title),await this.fillDescription(t.description),await this.selectCategory(t.category),await this.fillBrand(t.brand),await this.selectCondition(t.condition),await this.fillPrice(t.price),await this.selectShipping();const i=await this.submitListing();return{success:!0,listingId:t.id,platform:"mercari",platformListingId:i.platformListingId,platformUrl:i.platformUrl}}catch(e){return a("Failed to create Mercari listing:",e),{success:!1,listingId:t.id,platform:"mercari",error:e instanceof Error?e.message:"Unknown error"}}}};chrome.runtime.onMessage.addListener((t,e,i)=>{if(t.type,"CREATE_LISTING"===t.type){const{listingData:e}=t.payload;return n.createListing(e).then(t=>{i(t)}).catch(t=>{i({success:!1,listingId:e.id,platform:"mercari",error:t.message})}),!0}}),e("Mercari content script loaded")})();