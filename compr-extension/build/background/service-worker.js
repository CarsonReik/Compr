(()=>{"use strict";var e={d:(t,s)=>{for(var a in s)e.o(s,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:s[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{B:()=>h});const t={poshmark:{base:"https://poshmark.com",login:"https://poshmark.com/login",createListing:"https://poshmark.com/create-listing",mySales:"https://poshmark.com/sales"},mercari:{base:"https://www.mercari.com",login:"https://www.mercari.com/login",createListing:"https://www.mercari.com/sell"},depop:{base:"https://www.depop.com",login:"https://www.depop.com/login",createListing:"https://www.depop.com/products/create"}},s="saleDetectionAlarm",a="userId",n="authToken",o="settings",i="lastSaleCheck";const r={debug:(...e)=>{},info:(...e)=>{console.info("[Compr Extension]",...e)},warn:(...e)=>{console.warn("[Compr Extension]",...e)},error:(...e)=>{console.error("[Compr Extension]",...e)}},c=new class{constructor(){this.userId=null,this.authToken=null,this.pollingInterval=null,this.isPolling=!1;const e=chrome.runtime.getManifest().version.includes("dev")||"1.0.0"===chrome.runtime.getManifest().version;this.baseUrl=e?"http://localhost:3000":"https://compr.co"}async loadSettings(){const e=await chrome.storage.local.get([a,n]);this.userId=e[a]||null,this.authToken=e[n]||null,r.debug("HTTP client settings loaded",{hasUserId:!!this.userId,hasAuthToken:!!this.authToken})}async updateAuth(e,t){this.userId=e,this.authToken=t,await chrome.storage.local.set({[a]:e,[n]:t}),await this.connect()}async connect(){if(this.userId&&this.authToken||await this.loadSettings(),this.userId&&this.authToken)try{const e=await fetch(`${this.baseUrl}/api/extension/connect`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:this.userId,authToken:this.authToken,platformStatuses:[]})});if(!e.ok)throw new Error(`Connect failed: ${e.statusText}`);const t=await e.json();if(r.info("Connected to backend:",t),t.pendingJobs&&t.pendingJobs.length>0)for(const e of t.pendingJobs)await this.handleCreateListing(e);this.startPolling()}catch(e){r.error("Failed to connect to backend:",e)}else r.warn("Cannot connect: missing userId or authToken")}startPolling(){this.isPolling?r.debug("Already polling"):(this.isPolling=!0,r.info("Starting job polling"),this.pollingInterval=setInterval(()=>{this.poll()},5e3))}stopPolling(){this.pollingInterval&&(clearInterval(this.pollingInterval),this.pollingInterval=null),this.isPolling=!1,r.info("Stopped polling")}async poll(){if(this.userId&&this.authToken)try{const e=await fetch(`${this.baseUrl}/api/extension/poll?userId=${this.userId}&authToken=${this.authToken}`);if(!e.ok)return void r.warn("Poll failed:",e.statusText);const t=await e.json();if(t.hasNewJobs&&t.jobs){r.info(`Found ${t.jobs.length} new jobs`);for(const e of t.jobs)await this.handleCreateListing(e)}}catch(e){r.error("Polling error:",e)}}async handleCreateListing(e){const{jobId:t,platform:s,listingData:a}=e;r.info(`Processing job ${t}: Create listing on ${s}`),await h({type:"CREATE_LISTING",payload:{platform:s,listingData:a,userId:this.userId},requestId:t,timestamp:Date.now()})}async markJobInProgress(e){if(this.userId&&this.authToken)try{const t=await fetch(`${this.baseUrl}/api/extension/job-status`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:this.userId,authToken:this.authToken,jobId:e,status:"processing"})});if(!t.ok)throw new Error(`Failed to mark job in progress: ${t.statusText}`);r.info("Job marked as in_progress:",e)}catch(e){throw r.error("Failed to mark job in progress:",e),e}else r.warn("Cannot mark job in progress: missing credentials")}async sendResult(e){if(this.userId&&this.authToken)try{const t=await fetch(`${this.baseUrl}/api/extension/callback`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:this.userId,authToken:this.authToken,result:e})});if(!t.ok)throw new Error(`Callback failed: ${t.statusText}`);r.info("Result sent successfully")}catch(e){r.error("Failed to send result:",e)}else r.warn("Cannot send result: missing credentials")}get connected(){return this.isPolling&&!!this.userId&&!!this.authToken}},l=new class{constructor(){this.isRunning=!1}async initialize(){r.info("Initializing sale detection framework");const e=(await chrome.storage.local.get(o))[o]||{};if(!e.autoDelete)return void r.info("Auto-delete is disabled, skipping sale detection setup");const t=e.checkInterval||10;await chrome.alarms.create(s,{periodInMinutes:t,delayInMinutes:t}),r.info(`Sale detection alarm created (every ${t} minutes)`)}async startCheck(){if(this.isRunning)r.warn("Sale detection already running");else{this.isRunning=!0,r.info("Starting sale detection check");try{const e=await this.checkPoshmarkSales(),t=await this.checkMercariSales(),s=await this.checkDepopSales(),a=[...e,...t,...s];a.length>0?(r.info(`Found ${a.length} sold items`,a),await this.processSoldItems(a)):r.debug("No sold items found"),await chrome.storage.local.set({[i]:Date.now()})}catch(e){r.error("Error during sale detection check:",e)}finally{this.isRunning=!1}}}async checkPoshmarkSales(){return r.debug("Checking Poshmark for sales (not implemented)"),[]}async checkMercariSales(){return r.debug("Checking Mercari for sales (not implemented)"),[]}async checkDepopSales(){return r.debug("Checking Depop for sales (not implemented)"),[]}async processSoldItems(e){r.info("Processing sold items:",e);for(const t of e)await this.showSaleNotification(t)}async showSaleNotification(e){((await chrome.storage.local.get(o))[o]||{}).notifications&&await chrome.notifications.create({type:"basic",iconUrl:chrome.runtime.getURL("icons/icon128.png"),title:"Item Sold!",message:`Your item sold on ${e.platform}. Auto-delisting from other platforms...`,priority:2})}async manualCheck(){r.info("Manual sale detection check triggered"),await this.startCheck()}async stop(){await chrome.alarms.clear(s),r.info("Sale detection stopped")}};async function h(e){r.info("Handling WebSocket message:",e.type);try{switch(e.type){case"CREATE_LISTING":await async function(e,s){const{platform:a,listingData:n,userId:o}=e;r.info(`Creating listing on ${a}:`,n.title);try{await c.markJobInProgress(s)}catch(e){r.warn("Failed to mark job as in_progress:",e)}await async function(e,t){r.debug("Progress update:",{listingId:e,platform:t,status:"uploading_images",progress:0})}(n.id,a);try{const e=t[a]?.createListing;if(!e)throw new Error(`Unknown platform: ${a}`);const s=await chrome.tabs.create({url:e,active:!1});if(!s.id)throw new Error("Failed to create tab");await(i=s.id,new Promise((e,t)=>{const s=setTimeout(()=>{t(new Error("Tab load timeout"))},3e4);chrome.tabs.onUpdated.addListener(function t(a,n){a===i&&"complete"===n.status&&(clearTimeout(s),chrome.tabs.onUpdated.removeListener(t),setTimeout(e,2e3))})}));const o=function(e,t){return{type:"CREATE_LISTING",payload:t,requestId:`${Date.now()}-${Math.random().toString(36).substr(2,9)}`,timestamp:Date.now()}}(0,{listingData:n}),l=await async function(e,t){return new Promise((s,a)=>{chrome.tabs.sendMessage(e,t,e=>{chrome.runtime.lastError?a(new Error(chrome.runtime.lastError.message)):s(e)})})}(s.id,o);await c.sendResult({success:!0,listingId:n.id,platform:a,platformListingId:l.platformListingId,platformUrl:l.platformUrl}),setTimeout(()=>{s.id&&chrome.tabs.remove(s.id)},2e3),r.info("Listing created successfully:",l)}catch(e){throw r.error("Failed to create listing:",e),await c.sendResult({success:!1,listingId:n.id,platform:a,error:e instanceof Error?e.message:"Unknown error"}),e}var i}(e.payload,e.requestId);break;case"DELETE_LISTING":await async function(e){const{platform:t,platformListingId:s,reason:a}=e;r.info(`Deleting listing ${s} on ${t} (reason: ${a})`),r.warn("Delete listing not yet implemented")}(e.payload);break;case"CHECK_STATUS":await async function(){await Promise.all(["poshmark","mercari","depop"].map(e=>d(e)))}();break;default:r.warn("Unhandled WebSocket message type:",e.type)}}catch(e){r.error("Error handling message:",e)}}async function d(e){return{platform:e,loggedIn:!1,lastChecked:Date.now()}}chrome.runtime.onInstalled.addListener(async e=>{r.info("Extension installed/updated:",e.reason),"install"===e.reason&&(await chrome.storage.local.set({settings:{autoDelete:!0,checkInterval:10,notifications:!0},platformConnections:[]}),await chrome.tabs.create({url:"https://compr.co/extension-installed"})),await l.initialize()}),chrome.runtime.onStartup.addListener(async()=>{r.info("Extension started"),await c.connect(),await l.initialize()}),chrome.alarms.onAlarm.addListener(async e=>{e.name===s&&(r.info("Sale detection alarm triggered"),await l.startCheck())}),chrome.runtime.onMessage.addListener((e,t,s)=>{switch(r.debug("Received message:",e.type,e),e.type){case"WS_MESSAGE_RECEIVED":return h(e.message).then(()=>s({success:!0})).catch(e=>s({success:!1,error:e.message})),!0;case"CONNECTION_STATUS":s({connected:c.connected});break;case"CONNECT_BACKEND":return async function(e){const{userId:t,authToken:s}=e;if(!t||!s)throw new Error("Missing userId or authToken");await c.updateAuth(t,s),r.info("Backend connection updated with new credentials")}(e.payload).then(()=>s({success:!0})).catch(e=>s({success:!1,error:e.message})),!0;case"MANUAL_SALE_CHECK":return l.manualCheck().then(()=>s({success:!0})).catch(e=>s({success:!1,error:e.message})),!0;case"GET_PLATFORM_STATUS":return d(e.payload.platform).then(e=>s(e)).catch(e=>s({error:e.message})),!0;default:r.warn("Unknown message type:",e.type)}}),setInterval(()=>{c.connected&&r.debug("Service worker keepalive")},2e4),c.connect(),r.info("Background service worker initialized")})();